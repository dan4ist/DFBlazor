@page "/imageconverter"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using Data
@inject ILogger<ImageConverter> Logger
@inject IWebHostEnvironment Environment

<PageTitle>DF:Image Converter</PageTitle>

<h1>Upload Files</h1>
<p>UNDER CONSTRUCTION ATM</p>
<p>
    <label>
        Max file size:
        <input type="number" @bind="maxFileSize" />
    </label>
</p>

<p>
    <label>
        Max allowed files:
        <input type="number" @bind="maxAllowedFiles" />
    </label>
</p>

<p>
    <label>
        Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
        <InputFile OnChange="@LoadFiles" multiple />
    </label>
</p>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <img src="@file.Item2" width="250" height="250" />
            <li>
                <ul>
                    <li>Name: @file.Item1.Name</li>
                    <li>Last modified: @file.Item1.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Item1.Size</li>
                    <li>Content type: @file.Item1.ContentType</li>
                    <li>
                        <a href="@file.Item2" class="btn btn-primary">Download File</a>
                    </li>
                </ul>
            </li>
        }
    </ul>
}
<button type="button"accesskey="$0" class="btn btn-danger" @onclick="DeleteAllFiles" title="I don't want your stuff, trust me">Delete All Files</button>
@code {
    private List<Tuple<IBrowserFile, string>> loadedFiles = new();
    private long maxFileSize = 1024 * 2000;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    private MainLibrary lib;

    protected override void OnInitialized() {
        base.OnInitialized();
        lib = new MainLibrary();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e) {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles)) {
            try {
                //loadedFiles.Add(file);

                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var path = Path.Combine(Environment.ContentRootPath,
                        Environment.EnvironmentName, "unsafe_uploads",
                        trustedFileNameForFileStorage);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                string temppath = lib.ConvertFile(path);
                Tuple<IBrowserFile, string> temp = new Tuple<IBrowserFile, string>(file, temppath);
                loadedFiles.Add(temp);
            } catch (Exception ex) {
                Logger.LogError("File: {Filename} Error: {Error}",
                    file.Name, ex.Message);
            }
        }

        isLoading = false;
    }    

    private void DeleteAllFiles() {
        var path = Path.Combine(Environment.ContentRootPath,
                         Environment.EnvironmentName, "unsafe_uploads");
        DirectoryInfo di = new DirectoryInfo(path);
        foreach(FileInfo f in di.GetFiles()) {
            f.Delete();
        }
        loadedFiles = new List<Tuple<IBrowserFile, string>>();
    }
}
