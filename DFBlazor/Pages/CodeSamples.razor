@page "/CodeSamples"

<PageTitle>DF:Code Samples</PageTitle>

<h1>Code Samples</h1>

<p>My nonexistant github profile can be found here: <a href="https://github.com/dan4ist" target="_blank">https://github.com/dan4ist</a></p>

<p>See below for some common interview questions answered.</p>

<div class="row">
    <div class="col-sm-6">
        <div class="card text-white bg-dark mb-3">
            <div class="card-header">
                Two Sum Problem
            </div>
            <div class="card-body">
                <div class="card-text">
                    <p>Explanation: Find two numbers in an array such that their sum is equal to a target value.</p>
                    <p>Answer: O(n)</p>
                    @if (twoSum.Value != null) {
                        <CodeSnippet>@twoSum</CodeSnippet>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="card text-white bg-dark mb-3">
            <div class="card-header">
                Maximum Stock Profits
            </div>
            <div class="card-body">
                <div class="card-text">
                    <p>Explanation: Find the maximum profit that can be made by buying and selling a single stock given an array of stock prices.</p>
                    <p>Answer: O(n)</p>
                    @if (maxProfit.Value != null) {
                        <CodeSnippet>@maxProfit</CodeSnippet>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="card text-white bg-dark mb-3">
            <div class="card-header">
                Contains Duplicate
            </div>
            <div class="card-body">
                <div class="card-title">
                    Explanation: Determine if a number appears more than once in an array.
                </div>
                <div class="card-text">
                    <p>Answer: O(n)</p>
                    <CodeSnippet>@containsDuplicate</CodeSnippet>
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="card text-white bg-dark mb-3">
            <div class="card-header">
                Product of Array Except Self
            </div>
            <div class="card-body">
                <div class="card-title">
                    Explanation: Find the product of all elements in an array except the element at the current index
                </div>
                <div class="card-text">
                    <p>Answer: O(n)</p>
                    <CodeSnippet>@productExceptSelf</CodeSnippet>
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="card text-white bg-dark mb-3">
            <div class="card-header">
                Maximum Subarray
            </div>
            <div class="card-body">
                <div class="card-title">
                    Explanation: Find the highest value of a continguous subarray, given an array of integers
                </div>
                <div class="card-text">
                    <p>Answer: O(n)</p>
                    <CodeSnippet>@kadaneMaxSum</CodeSnippet>
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="card text-white bg-dark mb-3">
            <div class="card-header">
                Maximum Product Subarray
            </div>
            <div class="card-body">
                <div class="card-title">
                    Explanation: Find the maximum product subarray given an array of numbers
                </div>
                <div class="card-text">
                    <p>Answer: O(n)</p>
                    <CodeSnippet>@maxProduct</CodeSnippet>
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="card text-white bg-dark mb-3">
            <div class="card-header">
                Index of the First Occurance of a String
            </div>
            <div class="card-body">
                <div class="card-title">
                    Explanation: Use KMP to create an array of prefix/suffix and run through the text until a match is found, utilizing the LPS array to revert the crawler for partial matches.
                </div>
                <div class="card-text">
                    <p>Answer: O(n+m)</p>
                    <CodeSnippet>@FirstSubStringInString</CodeSnippet>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] private IJSRuntime _js { get; set; }

    private MarkupString twoSum = new MarkupString(@"
int[] TwoSum(int[] arr, int target) {
    Dictionary<int,int> indices = new Dictionary<int,int>();

    for (int i = 0; i < arr.Length; i++) {
        int num = arr[i];

        if (indices.ContainsKey(target - num)) {            //subtract our target from the number at our index and see if we get a collision
            return new int[] { indices[target - num], i };  //collision
        }
        indices[num] = i;                                   //add to the dictionary
    }

    return new int[0];
}
        ");

    private MarkupString maxProfit = new MarkupString(@"
int MaxProfit(int[] prices) {
    int minPrice = int.MaxValue;
    int maxProfit = 0;

    for (int i = 0; i < prices.Length; i++) {               //assumes a sorted array, just keep track of min and calculate max based off that
        int price = prices[i];
        minPrice = Math.Min(minPrice, price);
        maxProfit = Math.Max(maxProfit, price - minPrice);  //is our current delta bigger than anything we've seen?
    }

    return maxProfit;
}
    ");

    private MarkupString containsDuplicate = new MarkupString(@"
bool ContainsDuplicate(int[] nums) {
    HashSet<int> set = new HashSet<int>();

    for (int i = 0; i < nums.Length; i++) {     //simple hash implementation
        if (set.Contains(nums[i])) {
            return true;
        }
        set.Add(nums[i]);
    }

    return false;
}
    ");

    private MarkupString productExceptSelf = new MarkupString(@"
        int[] ProductExceptSelf(int[] nums) {
            int n = nums.Length;
            int[] leftProduct = new int[n];
            int[] rightProduct = new int[n];

            leftProduct[0] = 1;
            rightProduct[n - 1] = 1;

            for (int i = 1; i < n; i++) {
                leftProduct[i] = leftProduct[i - 1] * nums[i - 1];
            }

            for (int i = n - 2; i >= 0; i--) {
                rightProduct[i] = rightProduct[i + 1] * nums[i + 1];
            }

            int[] result = new int[n];

            for (int i = 0; i < n; i++) {
                result[i] = leftProduct[i] * rightProduct[i];
            }

            return result;
        }  
    ");

    private MarkupString kadaneMaxSum = new MarkupString(@"
        public int KadaneMaxSum(int[] arr) {
            int maxSum = 0;
            int currentSum = 0;
            int n = arr.Length;

            for (int i = 0; i < n; i++) {
                currentSum = currentSum + arr[i];

                if (currentSum < 0) {
                    currentSum = 0;
				}

                if (maxSum < currentSum) { 
                    maxSum = currentSum;
                }
            }

            return maxSum;
        }
");

    private MarkupString maxProduct = new MarkupString(@"
        public int MaxProduct(int[] arr) {
            int maxHere = arr[0];
            int minHere = arr[0];
            int maxSoFar = arr[0];

            for (int i = 1; i < arr.Length; i++) {
                int temp = Math.Max(Math.Max(arr[i], arr[i] * maxHere), arr[i] * minHere);
                minHere = Math.Min(Math.Min(arr[i], arr[i] * maxHere), arr[i] * minHere);
                maxHere = temp;
                maxSoFar = Math.Max(maxSoFar, maxHere);
            }

            return maxSoFar;
        }
");

    private MarkupString FirstSubStringInString = new MarkupString(@"
public int SubStrStr(string haystack, string needle) {
    int hLen = haystack.Length;
    int nLen = needle.Length;

    int[] lps = new int[nLen];
    lps[0] = 0;

    int a = 1;
    int b = 0;
    int c = 0;
    int len = 0;
    int result = 0;

    //create the prefix/suffix lps array
    while (a < nLen) {
        if (needle[a] == needle[len]) {
            len++;
            lps[a] = len;
            a++;
        } else {
            if (len != 0) {
                len = lps[len-1];
            } else {
                lps[a] = len;
                a++;
            }
        }
    }

    while (c < hLen) {
        if (needle[b] == haystack[c]) {
            b++;
            c++;
        }

        if (b == nLen) {
            return c-b;
        } else if (c < hLen && needle[b] != haystack[c]) {
            //we had a mismatch after a certain number of characters
            if (b != 0) {
                b = lps[b-1];
            } else {
                c++;
            }
        }
    }

    return -1;
}
");

    protected override async Task OnAfterRenderAsync(bool firstRender) { await _js.InvokeAsync<string>("highlightCode"); }
}
